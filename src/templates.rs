use indoc::formatdoc;
use std::collections::BTreeMap;

pub const FLAKE_FILE: &str = "flake.nix";

/**
 * @brief Generates the content of the flake.nix file.
 *
 * This function constructs the Nix flake file content using the provided flake inputs.
 * It generates the appropriate Nix syntax for the inputs and output blocks, including
 * the logic for handling packages and shell hooks as specified in the devshell.toml configuration.
 *
 * @param flake_inputs A map of input names to their corresponding URLs.
 * @return The generated flake.nix file content as a String.
 */
pub fn generate_flake_nix(flake_inputs: &BTreeMap<String, String>) -> String {
    let inputs_block = flake_inputs
        .iter()
        .map(|(key, url)| format!("    {}.url = \"{}\";", key, url))
        .collect::<Vec<_>>()
        .join("\n");

    let inputs_args = flake_inputs
        .keys()
        .map(|key| format!(", {}", key))
        .collect::<String>();

    formatdoc! {"
        {{
          description = \"A development shell generated by nix-shell-gen\";

          inputs = {{
            nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";
            flake-utils.url = \"github:numtide/flake-utils\";

            # --- Generated Inputs ---
        {inputs_block}
            # ----------------------
          }};

          outputs = {{ self, nixpkgs, flake-utils{inputs_args}, ... }}@inputs:
            flake-utils.lib.eachDefaultSystem (system:
              let
                pkgs = nixpkgs.legacyPackages.${{system}};
                config = builtins.fromTOML (builtins.readFile ./devshell.toml);

                pkgList = map (pkgName:
                  let
                    interpolatedPkgName = builtins.replaceStrings [\"${{system}}\"] [system] pkgName;
                    path = builtins.split \".\" interpolatedPkgName;
                    inputName = builtins.head path;
                    isInput = builtins.hasAttr inputName inputs;
                  in
                    if isInput then
                      let
                        inputFlake = builtins.getAttr inputName inputs;
                        attrPath = builtins.tail path;
                      in
                        builtins.getAttrByPath attrPath inputFlake
                    else
                      builtins.getAttr interpolatedPkgName pkgs
                ) config.packages;
              in
              {{
                devShells.default = pkgs.mkShell {{
                  buildInputs = pkgList;
                  shellHook = if builtins.hasAttr \"shell-hook\" config then config.\"shell-hook\" else \"\";
                  pure = if builtins.hasAttr \"pure\" config then config.pure else false;
                }};
              }});
        }}
    "}
}
